import init from './mcl.wasm';

var ASM_CONSTS = {
    16084: function (p, n) {
        const a = crypto.getRandomValues(new Uint8Array(n));
        for (let i = 0; i < n; i++) {
            HEAP8[p + i] = a[i];
        }
    }
};

const exports = await init({
    a: {
        a: () => false,
        b(code, sigPtr, buf) {
            var args = [];
            var ch;
            buf >>= 2;
            while (ch = HEAPU8[sigPtr++]) {
                var double = ch < 105;
                if (double && buf & 1) buf++;
                args.push(double ? HEAPF64[buf++ >> 1] : HEAP32[buf]);
                ++buf;
            }
            return ASM_CONSTS[code](...args);
        }
    }
});

const { buffer } = exports.c;
export const HEAP8 = new Int8Array(buffer);
export const HEAP16 = new Int16Array(buffer);
export const HEAP32 = new Int32Array(buffer);
export const HEAPU8 = new Uint8Array(buffer);
export const HEAPU16 = new Uint16Array(buffer);
export const HEAPU32 = new Uint32Array(buffer);
export const HEAPF32 = new Float32Array(buffer);
export const HEAPF64 = new Float64Array(buffer);

export const ___wasm_call_ctors = exports["d"];
export const _mclBnMalloc = exports["e"];
export const _mclBnFree = exports["f"];
export const _mclBn_getVersion = exports["g"];
export const _mclBn_init = exports["h"];
export const _mclBn_getCurveType = exports["i"];
export const _mclBn_getOpUnitSize = exports["j"];
export const _mclBn_getG1ByteSize = exports["k"];
export const _mclBn_getFpByteSize = exports["l"];
export const _mclBn_getFrByteSize = exports["m"];
export const _mclBn_getCurveOrder = exports["n"];
export const _mclBn_getFieldOrder = exports["o"];
export const _mclBn_setETHserialization = exports["p"];
export const _mclBn_getETHserialization = exports["q"];
export const _mclBn_setMapToMode = exports["r"];
export const _mclBnFr_clear = exports["s"];
export const _mclBnFr_setInt = exports["t"];
export const _mclBnFr_setInt32 = exports["u"];
export const _mclBnFr_setStr = exports["v"];
export const _mclBnFr_setLittleEndian = exports["w"];
export const _mclBnFr_setBigEndianMod = exports["x"];
export const _mclBnFr_getLittleEndian = exports["y"];
export const _mclBnFr_setLittleEndianMod = exports["z"];
export const _mclBnFr_deserialize = exports["A"];
export const _mclBnFr_isValid = exports["B"];
export const _mclBnFr_isEqual = exports["C"];
export const _mclBnFr_isZero = exports["D"];
export const _mclBnFr_isOne = exports["E"];
export const _mclBnFr_isOdd = exports["F"];
export const _mclBnFr_isNegative = exports["G"];
export const _mclBnFr_setByCSPRNG = exports["H"];
export const _mclBnFp_setByCSPRNG = exports["I"];
export const _mclBn_setRandFunc = exports["J"];
export const _mclBnFr_setHashOf = exports["K"];
export const _mclBnFr_getStr = exports["L"];
export const _mclBnFr_serialize = exports["M"];
export const _mclBnFr_neg = exports["N"];
export const _mclBnFr_inv = exports["O"];
export const _mclBnFr_sqr = exports["P"];
export const _mclBnFr_add = exports["Q"];
export const _mclBnFr_sub = exports["R"];
export const _mclBnFr_mul = exports["S"];
export const _mclBnFr_div = exports["T"];
export const _mclBnFp_neg = exports["U"];
export const _mclBnFp_inv = exports["V"];
export const _mclBnFp_sqr = exports["W"];
export const _mclBnFp_add = exports["X"];
export const _mclBnFp_sub = exports["Y"];
export const _mclBnFp_mul = exports["Z"];
export const _mclBnFp_div = exports["_"];
export const _mclBnFp2_neg = exports["$"];
export const _mclBnFp2_inv = exports["aa"];
export const _mclBnFp2_sqr = exports["ba"];
export const _mclBnFp2_add = exports["ca"];
export const _mclBnFp2_sub = exports["da"];
export const _mclBnFp2_mul = exports["ea"];
export const _mclBnFp2_div = exports["fa"];
export const _mclBnFr_squareRoot = exports["ga"];
export const _mclBnFp_squareRoot = exports["ha"];
export const _mclBnFp2_squareRoot = exports["ia"];
export const _mclBnG1_clear = exports["ja"];
export const _mclBnG1_setStr = exports["ka"];
export const _mclBnG1_deserialize = exports["la"];
export const _mclBnG1_isValid = exports["ma"];
export const _mclBnG1_isEqual = exports["na"];
export const _mclBnG1_isZero = exports["oa"];
export const _mclBnG1_isValidOrder = exports["pa"];
export const _mclBnG1_hashAndMapTo = exports["qa"];
export const _mclBnG1_getStr = exports["ra"];
export const _mclBnG1_serialize = exports["sa"];
export const _mclBnG1_neg = exports["ta"];
export const _mclBnG1_dbl = exports["ua"];
export const _mclBnG1_normalize = exports["va"];
export const _mclBnG1_add = exports["wa"];
export const _mclBnG1_sub = exports["xa"];
export const _mclBnG1_mul = exports["ya"];
export const _mclBnG1_mulCT = exports["za"];
export const _mclBnG2_clear = exports["Aa"];
export const _mclBnG2_setStr = exports["Ba"];
export const _mclBnG2_deserialize = exports["Ca"];
export const _mclBnG2_isValid = exports["Da"];
export const _mclBnG2_isEqual = exports["Ea"];
export const _mclBnG2_isZero = exports["Fa"];
export const _mclBnG2_isValidOrder = exports["Ga"];
export const _mclBnG2_hashAndMapTo = exports["Ha"];
export const _mclBnG2_getStr = exports["Ia"];
export const _mclBnG2_serialize = exports["Ja"];
export const _mclBnG2_neg = exports["Ka"];
export const _mclBnG2_dbl = exports["La"];
export const _mclBnG2_normalize = exports["Ma"];
export const _mclBnG2_add = exports["Na"];
export const _mclBnG2_sub = exports["Oa"];
export const _mclBnG2_mul = exports["Pa"];
export const _mclBnG2_mulCT = exports["Qa"];
export const _mclBnGT_clear = exports["Ra"];
export const _mclBnGT_setInt = exports["Sa"];
export const _mclBnGT_setInt32 = exports["Ta"];
export const _mclBnGT_setStr = exports["Ua"];
export const _mclBnGT_deserialize = exports["Va"];
export const _mclBnGT_isEqual = exports["Wa"];
export const _mclBnGT_isZero = exports["Xa"];
export const _mclBnGT_isOne = exports["Ya"];
export const _mclBnGT_getStr = exports["Za"];
export const _mclBnGT_serialize = exports["_a"];
export const _mclBnGT_neg = exports["$a"];
export const _mclBnGT_inv = exports["ab"];
export const _mclBnGT_invGeneric = exports["bb"];
export const _mclBnGT_sqr = exports["cb"];
export const _mclBnGT_add = exports["db"];
export const _mclBnGT_sub = exports["eb"];
export const _mclBnGT_mul = exports["fb"];
export const _mclBnGT_div = exports["gb"];
export const _mclBnGT_pow = exports["hb"];
export const _mclBnGT_powGeneric = exports["ib"];
export const _mclBnG1_mulVec = exports["jb"];
export const _mclBnG2_mulVec = exports["kb"];
export const _mclBnGT_powVec = exports["lb"];
export const _mclBn_pairing = exports["mb"];
export const _mclBn_finalExp = exports["nb"];
export const _mclBn_millerLoop = exports["ob"];
export const _mclBn_millerLoopVec = exports["pb"];
export const _mclBn_getUint64NumToPrecompute = exports["qb"];
export const _mclBn_precomputeG2 = exports["rb"];
export const _mclBn_precomputedMillerLoop = exports["sb"];
export const _mclBn_precomputedMillerLoop2 = exports["tb"];
export const _mclBn_precomputedMillerLoop2mixed = exports["ub"];
export const _mclBn_FrLagrangeInterpolation = exports["vb"];
export const _mclBn_G1LagrangeInterpolation = exports["wb"];
export const _mclBn_G2LagrangeInterpolation = exports["xb"];
export const _mclBn_FrEvaluatePolynomial = exports["yb"];
export const _mclBn_G1EvaluatePolynomial = exports["zb"];
export const _mclBn_G2EvaluatePolynomial = exports["Ab"];
export const _mclBn_verifyOrderG1 = exports["Bb"];
export const _mclBn_verifyOrderG2 = exports["Cb"];
export const _mclBnFp_setInt = exports["Db"];
export const _mclBnFp_setInt32 = exports["Eb"];
export const _mclBnFp_getStr = exports["Fb"];
export const _mclBnFp_setStr = exports["Gb"];
export const _mclBnFp_deserialize = exports["Hb"];
export const _mclBnFp_serialize = exports["Ib"];
export const _mclBnFp_clear = exports["Jb"];
export const _mclBnFp_setLittleEndian = exports["Kb"];
export const _mclBnFp_setLittleEndianMod = exports["Lb"];
export const _mclBnFp_setBigEndianMod = exports["Mb"];
export const _mclBnFp_getLittleEndian = exports["Nb"];
export const _mclBnFp_isValid = exports["Ob"];
export const _mclBnFp_isEqual = exports["Pb"];
export const _mclBnFp_isZero = exports["Qb"];
export const _mclBnFp_isOne = exports["Rb"];
export const _mclBnFp_isOdd = exports["Sb"];
export const _mclBnFp_isNegative = exports["Tb"];
export const _mclBnFp_setHashOf = exports["Ub"];
export const _mclBnFp_mapToG1 = exports["Vb"];
export const _mclBnFp2_deserialize = exports["Wb"];
export const _mclBnFp2_serialize = exports["Xb"];
export const _mclBnFp2_clear = exports["Yb"];
export const _mclBnFp2_isEqual = exports["Zb"];
export const _mclBnFp2_isZero = exports["_b"];
export const _mclBnFp2_isOne = exports["$b"];
export const _mclBnFp2_mapToG2 = exports["ac"];
export const _mclBnG1_getBasePoint = exports["bc"];
export const _blsSetETHmode = exports["cc"];
export const _blsSetMapToMode = exports["dc"];
export const _blsInit = exports["ec"];
export const _blsSetETHserialization = exports["fc"];
export const _blsMalloc = exports["gc"];
export const _blsFree = exports["hc"];
export const _blsIdSetInt = exports["ic"];
export const _blsSecretKeySetLittleEndian = exports["jc"];
export const _blsSecretKeySetLittleEndianMod = exports["kc"];
export const _blsGetPublicKey = exports["lc"];
export const _blsHashToSignature = exports["mc"];
export const _blsSign = exports["nc"];
export const _blsVerify = exports["oc"];
export const _blsMultiVerifySub = exports["pc"];
export const _blsMultiVerifyFinal = exports["qc"];
export const _blsMultiVerify = exports["rc"];
export const _blsAggregateSignature = exports["sc"];
export const _blsSignatureAdd = exports["tc"];
export const _blsPublicKeyAdd = exports["uc"];
export const _blsFastAggregateVerify = exports["vc"];
export const _blsAggregateVerifyNoCheck = exports["wc"];
export const _blsIdSerialize = exports["xc"];
export const _blsSecretKeySerialize = exports["yc"];
export const _blsPublicKeySerialize = exports["zc"];
export const _blsSignatureSerialize = exports["Ac"];
export const _blsIdDeserialize = exports["Bc"];
export const _blsSecretKeyDeserialize = exports["Cc"];
export const _blsPublicKeyDeserialize = exports["Dc"];
export const _blsSignatureDeserialize = exports["Ec"];
export const _blsIdIsEqual = exports["Fc"];
export const _blsSecretKeyIsEqual = exports["Gc"];
export const _blsPublicKeyIsEqual = exports["Hc"];
export const _blsSignatureIsEqual = exports["Ic"];
export const _blsIdIsZero = exports["Jc"];
export const _blsSecretKeyIsZero = exports["Kc"];
export const _blsPublicKeyIsZero = exports["Lc"];
export const _blsSignatureIsZero = exports["Mc"];
export const _blsSecretKeyShare = exports["Nc"];
export const _blsPublicKeyShare = exports["Oc"];
export const _blsSecretKeyRecover = exports["Pc"];
export const _blsPublicKeyRecover = exports["Qc"];
export const _blsSignatureRecover = exports["Rc"];
export const _blsSecretKeyAdd = exports["Sc"];
export const _blsSignatureVerifyOrder = exports["Tc"];
export const _blsPublicKeyVerifyOrder = exports["Uc"];
export const _blsSignatureIsValidOrder = exports["Vc"];
export const _blsPublicKeyIsValidOrder = exports["Wc"];
export const _blsVerifyAggregatedHashes = exports["Xc"];
export const _blsSignHash = exports["Yc"];
export const _blsPublicKeySerializeUncompressed = exports["Zc"];
export const _blsSignatureSerializeUncompressed = exports["_c"];
export const _blsPublicKeyDeserializeUncompressed = exports["$c"];
export const _blsSignatureDeserializeUncompressed = exports["ad"];
export const _blsVerifyPairing = exports["bd"];
export const _blsVerifyHash = exports["cd"];
export const _blsSecretKeySub = exports["dd"];
export const _blsPublicKeySub = exports["ed"];
export const _blsSignatureSub = exports["fd"];
export const _blsSecretKeyNeg = exports["gd"];
export const _blsPublicKeyNeg = exports["hd"];
export const _blsSignatureNeg = exports["id"];
export const _blsSecretKeyMul = exports["jd"];
export const _blsPublicKeyMul = exports["kd"];
export const _blsSignatureMul = exports["ld"];
export const _blsPublicKeyMulVec = exports["md"];
export const _blsSignatureMulVec = exports["nd"];
export const _blsGetOpUnitSize = exports["od"];
export const _blsGetCurveOrder = exports["pd"];
export const _blsGetFieldOrder = exports["qd"];
export const _blsGetSerializedSecretKeyByteSize = exports["rd"];
export const _blsGetFrByteSize = exports["sd"];
export const _blsGetSerializedPublicKeyByteSize = exports["td"];
export const _blsGetG1ByteSize = exports["ud"];
export const _blsGetSerializedSignatureByteSize = exports["vd"];
export const _blsGetGeneratorOfPublicKey = exports["wd"];
export const _blsSetGeneratorOfPublicKey = exports["xd"];
export const _blsIdSetDecStr = exports["yd"];
export const _blsIdSetHexStr = exports["zd"];
export const _blsIdSetLittleEndian = exports["Ad"];
export const _blsIdGetDecStr = exports["Bd"];
export const _blsIdGetHexStr = exports["Cd"];
export const _blsHashToSecretKey = exports["Dd"];
export const _blsSecretKeySetByCSPRNG = exports["Ed"];
export const _blsSetRandFunc = exports["Fd"];
export const _blsGetPop = exports["Gd"];
export const _blsVerifyPop = exports["Hd"];
export const _blsIdGetLittleEndian = exports["Id"];
export const _blsSecretKeySetDecStr = exports["Jd"];
export const _blsSecretKeySetHexStr = exports["Kd"];
export const _blsSecretKeyGetLittleEndian = exports["Ld"];
export const _blsSecretKeyGetDecStr = exports["Md"];
export const _blsSecretKeyGetHexStr = exports["Nd"];
export const _blsPublicKeySetHexStr = exports["Od"];
export const _blsPublicKeyGetHexStr = exports["Pd"];
export const _blsSignatureSetHexStr = exports["Qd"];
export const _blsSignatureGetHexStr = exports["Rd"];
export const _blsDHKeyExchange = exports["Sd"];
export const _blsMultiAggregateSignature = exports["Td"];
export const _blsMultiAggregatePublicKey = exports["Ud"];

___wasm_call_ctors();